
2021/04/06(Tue.)
ascan.cpp (+ fft.cpp, wave1d.cpp, waves.h)
	A-scope波形に対する種々の操作
	新たにSigmoid関数による波形切り出し操作を追加

	動作確認: reference signalと透過波データが必要
	出力ファイル

		ref0.out(参照波形)
		ref1.out(参照波形×Window) 
	
		wv0.out(透過波形)
		wv1.out(透過波形×Window）
		wv1.fft(FFTスペクトル：極座標)

		cp.dat（位相速度）
mw.py
	Fractional Voigtモデルによるslowness sp(w)のフィッティング
	s0は線形最小二乗法で決定。
	betaは囲い込み後に解を黄金分割法で精度改善
	実行にはascan.cppからの出力cp.datが必要(slownessのデータを指定した周波数範囲で利用)
	周波数の刻みcp.datに合わせられる

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2021/04/07(Wed.)
ascan.cpp
	Voigt クラスを追加
		Fractional Voigtモデルのcomplex modulusと大きさ、偏角、slownessを計算
		メンバ変数に計測波形から求めたslownessを持つ
		s_mdl(モデル),s_msd(実験)*s0がそれぞれslownessを表す。
		両者の差を取ることでコストを計算。
		コストをbetaについて最小化するメンバー関数を作成

	-->　alph(exponent)は大抵1.0が最適(つまり普通のVoigt)
	--> betaを最適化しても実験で得たスローネスの細かい変動は表現できない
		（Voigtモデルはslownessが周波数に対して単調に変化する)

	sp.datの内容は
		frequency, slowness(measured), slowness(model), phase vel.(measured), phase vel.(model)
		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2021/04/08(Thu.)
ascan.cpp 不要部分を削除
	出力ファイル cp.datは廃止（sp.datに指定した周波数範囲の位相速度等が書き出される)
	sp.datの内容は
	 Col 1     COL2                COL3             COL4                  COL5               COL6
	frequency, slowness(measured), slowness(model), phase vel.(measured), phase vel.(model), Im(s)(model))
		
Pycodes/cp_hist.py
	cp.hist(<-- bscan.cppの出力)
	位相速度のヒスグラムをcolormap表示
	** mw.py がGit管理下に置かれていなかった。see memo taken on th6 of April. 

bscan.cpp, ascan.cpp
	pythonで計算(stats.py + kw.py)で計算した位相速度と結果が合わない!

	The range of np.angle() & arg(complex<double>) is both [-pi, pi].
	--> modified to [0,2pi] by th=2pi+th ( when th<0). 

	原因はWindowのかけ方かと思い調べているが現状では原因不明。
	Sigmoid + ゆるいGaussianWindow +　tight なGaussian の組で窓をかけると、
	右肩上がりの結果が全ての鉱物種について現れる。これは明らかに窓関数によるバイアス
	で意味の無い結果と思われる。
	--> Possible source of error is zero padding in FFT. 
	    How python FFT works with data of non 2^p length has not been checked.
	    Is simple zero padding is OK ?  Need to be cheked.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2021/04/09(Fri.)
ascan.cppとkw.pyの結果の違いについて
	原因解明: ascan.cpp-wave1d.cppに誤り 
		Wv1D::Gauss()で、標準偏差sigで引数を割るのを忘れていた。
		Gauss窓の幅が意図した通りにはなっていなかった
		(debuggingの方法：参照波形のA-scanと周波数スペクトルを
		kw.pyとascan.cppで比較、窓関数をかけた後の波形が異なることが判明）


	kw.py 波形のload時に振幅を2倍していた(単位を速度にするための換算係数）
	ややこしいのでそのまま(1倍)にしておくことに。

	bscan.cpp+Pycodes/cp_hist.pyでヒストグラムのカラーマップは概ね一致することを確認
	FFT with zero padding was found to give correct spectrum. 

	Next:
	* ascan.cppの整理(不要部分を削除してslimにする)
	* bscan.cppも同じ
	* 窓関数のかけ方を正当化するための論拠(窓関数パラメータ設定の合理化、理由付けagain)
	* viscoelastic complex modulus M(w)でのfitting (Maxwell modelも検討すべきか？）
	* 平均的なcp(w)と外れ値の比較,原因究明
	* M(w) parameterの分布

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2021/04/10(Sat.)
	* ascan.cpp
	Voigt class in "ascan.cpp" --> separated from ascan.cpp to voigt.h and voigt.cpp
	Least square fitting of cp (measured phase velocity) 
		--> Voigt::linfit_cp(double *a, double *b); 
			cp(freq.) = a x (frequency) + b 
	cp(位相速度)の直線近似-->平均値と勾配を評価（cp-f curve分類の1st attempt)

	* bscan.cpp
	Voigtクラスを使って、位相速度を直線近似
	--> linfit.outに結果を書き出し(a,b,cp_mean)
	--> ../Pycodes/linfit_hist.pyでヒストグラムを表示

	cpの周波数に対する勾配 正負両方のケースがある(ダンパーを含むようなModulusでは負の傾きが出せない)
	Cole-Cole typeの使用が必要？ --> CC typeでもModululsの大きさは増加
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2021/04/16 (Fri.)
	k(w)=phase/h (wave number)をvisco elastic modulusで近似する(plan)
	k(w)はeta(viscosity)による影響が曲率に出るが、実験結果の方の
	k(w)hの曲率が微妙でfittingにどれくらい意味があるか自信が持てない.	
	もっと確実かつ、全体像を掴むことができる類型化(classification
	の方法が無いか？？
2021/04/17(Sat.)
	c(w)= a x w +b (regression) 
	 i) a<0: S/Nがよい、低周波側でk-wの傾きが小さい（下に凸)
	ii) a>0: S/Nが悪い、低周波側でk-wの傾きが直線的あるいは上に凸
		--> 振幅(S/N）の情報を使っていない(減衰の評価を諦めたため。同一鉱物種での相対評価は可能)
	 (a,<c>) のscatter plotには負の相関がある。
	 鉱物種による差がある。平均波形からの偏差を時間波形から直接定量化する方が説得力があるかも知れない。

	voigt.h, voigt.cpp: linfit_cp をvoid からdoubleに変更(位相速度の平均値を戻す)
	
2021/04/28 (Wed.)
	bscan.cpp > Wv2D::*amp_mean <-- all waveforms stacked  (coded before, but has not been noteed)
		In "Wv2D::load(...)"
			1. memory allocatted,
			2. data loaded, 
			3. exported to File "amp_mean_*.dat" where * is mineral type, one of {Qt,Na,Fe}

	mean_awv.cpp ( mean_awv.o + fft.o + wave1d.o)
		used to investigate mean wave frequency spectrum
		--> wv.t (mean A-scan, Gaussian filtered)
		--> wv.f (mean A-scan, filtered, FFT)
		--> wv2.t (A-scan, raw data)
		とりあえず、以上のファイル名で出力して結果を確認
	到達が明らかに速いものがある。
	減衰振動波形は、多重反射によるもの．
	中には平均波形に非常に近いかたちものもある（当然か...)
	以上Quartzのデータで2,3表示したときの話．

	平均波形のunwrapした位相スペクトがおかしい(unwrapされていないような形)
	-->個別の波形の位相スペクトルも見てみる。プログラム上の問題かどうかを確認するために
2021/05/08 (Sat.)
	unwrap結果の確認(再開)
	到達時間が12micro sec程度
	-->  exp(iw tf) tfが大き周波数のサンプリング間隔が荒すぎてunwrapが正しく行われない。
	--> reference signalでdeconvolutionした後にunwrapする
		あるいは、時間を適当にずらしてunwrapしたあとにずらした位相を加える

	修正：mean_awv.cpp
	 平均波形でdeconvolution --> awv.renew_phase() --> awv.unwrap(0.5)
	平均波形からの位相遅れが周波数の関数として得られる
	位相の勾配は正負どちらにもなりえる--> どう解釈するか？統計的にみると何が分かるか?
2021/05/11 (Thu.)
	bscan.cpp再び
	cpw.outへ平均位相速度（あるいはslowness)を出力
	multimodalな分布でなければカーブは意味をもつ
	偏差成分は正規分的か？鉱物種による違いはどのようにあらわれるか？
	-->分散関係の類型化（懸案の）

2021/5/12(Wed.)
	新規作成：
	win_test.cpp (Window parameterの影響を調べる. Hunning窓関数）
	tmax.cpp 
		最大振幅とその時間を調べる。 -->tmax_M.out
		位相と位相速度	--> phi_M.out
		位相速度のヒストグラム --> cp_hist_M.out
		位相速度-周波数関係の平均　--> cp_mean_M.out
			M={Qt,Na,K}
		wave1d.cpp(Ascanクラス)だけを使って位相速度を計算, Hnunning窓を使用)

	May better look at slowness histogram  ?
	Qt, K, Na一括処理
	parameter決定
	分散傾向の分類dc/dw >0, <0
	Theoretical Slowness curve
2021/5/13(Thr.)
	tmax.cpp
		周波数毎の位相速度histogramを作成--> cp_hist2d_M.out
		Hist1D, Hist2Dクラスを追加
		出力追加：tmax_hist_M.out (最大振幅時刻(negative)のヒストグラム)
	周波数によって分布はあまり変わらない。
	Qtは分散が小さい。Kは非対称な分布になる--> tbを調整したら概ね対称になった
	tmaxはnegative peakで取るように修正

	
	hist2d.py--> cp-freq histogramを表示


	Ascan.py --> typical_M.png (typical A-scans incld. reference )
	bscan.py --> bscan_M.png (B-scan waveforms) 
	hist2d.py --> hist2d_M.png
	hist_total.py --> hist_total.png
	
2021/5/14(Fri.)
	histogram ( tmax.cpp) のbin設定を修正
	--> xmin,xmaxでbinの中央値を設定 

	Window parameterのtuning (tb=12.45, sig=0.75) 根拠が言いにくい
		tb=12.45 micro sec
		sig=0.6 micro sec --> (f=0.833MHz相当)でPPTを作成する

	"PPT_figs" created
	 Misc. output files in ./Src deleted./ 
	 
	To use c/c++ codes: 
		move to PPT_figs
		type ../tmax (for example)
	To show graphs:
		in PPT_figs
		type ***.py (such as hist2d.py, hist_total.py)
	
	Window Type: chaged from "Tri" to "Hann" window

	../Pycodes/Cij.py : slowness surface plotting for (Qt,Na,K,Bt)
		quasi P-waveのphase velocity計算、histogram表示
2021/06/07(Mon) 
	New directory "Src/FDM" created
	 (acoustic approximation, heterogeneous media, modified grid system) 
2021/06/09(Wed)
	/Src/FDM/main.cpp, fdm2d.h, field.cpp, inwv.cpp, domain.cpp	
	一通りの構造が完成
	--> fdm equations (index range), Periodic BC 確認して動くものにする
2021/06/10(Thr)
	/Src/Model/img2.py 　画像のよみこみ、鉱物種判定と外部ファイル(minmap.out)への結果出力
	/Src/Model/clst.cpp minmap.outから、clusteringを行って、鉱物粒マップを作成する(予定)

	FDM --> 0th ver ready (ran without apparent trouble)
		v*.out : vlelocity field ( shown by vfld.py)
		s*.out : stress(pressure) field
	Input data files = inwv0.inp, fdm.inp  (inwv0.dat--> inwv0.inpに変更)

	Imporve efficiency of vfld.py (use set_data command)
2021/06/11(Fri)
	Model/clst.cpp(完成！)

	Data Flow	
	img2.py: 
		png画像を読み込み(core_top_face.png)
		4値化画像を出力（minmap.out-->minmap.pyで結果を表示）

	clst.cpp 　<--- minmap.out
		grain.out --> grain.py 
		　kcell[i][j]=grain No.
		  	Quartz: 0 <= grain No. < npk 
			K-Feldspar: npk<= grain No. < 2*npk
			Na-Feldspar: 2*npk <= grain No. < 3*npk
			(npkは鉱物種あたりのgrain数）
		* Biotiteは近傍の鉱物種に置き換え

	次のステップ：
		位相速度bank (Qt, K, Na)の作成（周波数範囲、上限、下限を限定、phi_M.outからcpを読み取ってformat）
		FDM[ codeへのfeed (FDM/main.cppから読み込み)
		cp_(Mineral)[grain No.] = randomly selcted cp (sampling from cp-bank[Mineral])
 
		Model/grain.outをFDM/main.cppへloadする。（Ndivを合わせ、領域サイズ{Xa,Xb}を設定）
		grain.outから読み込んだkcellを領域分割データとして使
		grain No.%npk(grain数)番目のcpをdomainのpixelに与える。
		FDMは周期境界条件-->stress B.Cに変更

		A,B-scan波形の出力
		入力波形を計測波形から作成する		
2021/06/12(Sat)
	Src/tmax.cppの出力書式を修正
	【修正内容】
		phi_K.out, phi_Qt.out の冒頭にデータ数(波形数,データ点数）、周波数刻みdfを追加。
		データブロックの区切りにコメント行を挿入
		データ間のdelimitterを,（カンマ）に統一
	実行方法： PPT_figs/から ../tmaxを実行→Qt, K, Naに対する結果が実行箇所のフォルダに作成される
	上記で得られる位相速度のデータをSrc/FDM/cpbank.cppで切り出して、FDMプログラムに読み込む。


	program一式完成（fdm + cpbank.cpp）
	[未]画像データからモデル生成する/しない場合の切り替え
	[未]正確な画像寸法の入力
	[未]入射波形の設定（実験で得られた波形）
	[未]計測に用いた試料の画像からのモデル生成
	[未]B-scanデータの出力
	[未]応力境界か周期境界か？
	[未]単結晶音速データでの計算
	[未]結晶粒の数の妥当性
	[未]vfld.pyの効率化

	各種プログラムの機能、実行
	Src/Model/img2.py  --> minmap.out
	Src/Model/clst.cpp --> grain.out

	PPT_Figs/  ../tmax --> phi_M.out
	Src/FDM/fdm --> cp.out --> cp.py
		    --> v***.out --> vfld.py
	　

